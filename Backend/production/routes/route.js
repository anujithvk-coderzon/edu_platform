"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const authController_1 = require("../controller/authController");
const userController_1 = require("../controller/userController");
const courseController_1 = require("../controller/courseController");
const categoryController_1 = require("../controller/categoryController");
const moduleController_1 = require("../controller/moduleController");
const materialController_1 = require("../controller/materialController");
const enrollmentController_1 = require("../controller/enrollmentController");
const uploadController_1 = require("../controller/uploadController");
const analyticsController_1 = require("../controller/analyticsController");
const middleware_1 = require("../Middleware/middleware");
const route = express_1.default.Router();
route.post("/bootstrap", authController_1.BootstrapAdmin);
route.post("/register", authController_1.RegisterUser);
route.post("/register/tutor", middleware_1.IsAdmin, authController_1.RegisterTutor);
route.post("/login", authController_1.LoginUser);
route.post("/logout", authController_1.LogoutUser);
route.post("/forgot-password", authController_1.AdminForgotPassword);
route.post("/verify-otp", authController_1.AdminVerifyForgotPasswordOtp);
route.post("/reset-password", authController_1.AdminResetPassword);
route.get("/me", middleware_1.IsAuthenticated, authController_1.GetCurrentUser);
route.put("/profile", middleware_1.IsAuthenticated, authController_1.UpdateProfile);
route.put("/change-password", middleware_1.IsAuthenticated, authController_1.ChangePassword);
route.get("/users", middleware_1.IsAdmin, userController_1.GetAllUsers);
route.get("/users/:id", middleware_1.IsAdmin, userController_1.GetUserById);
route.put("/users/:id", middleware_1.IsAdmin, userController_1.UpdateUser);
route.delete("/users/:id", middleware_1.IsAdmin, userController_1.DeleteUser);
route.get("/users/stats", middleware_1.IsAdmin, userController_1.GetUserStats);
route.get("/tutors", middleware_1.IsAuthenticated, userController_1.GetAllTutors);
route.get("/courses", courseController_1.GetAllCourses);
route.get("/courses/my", middleware_1.IsAuthenticated, courseController_1.GetMyCourses);
route.get("/courses/:id", courseController_1.GetCourseById);
route.post("/courses", middleware_1.IsAuthenticated, courseController_1.CreateCourse);
route.put("/courses/:id", middleware_1.IsAuthenticated, courseController_1.UpdateCourse);
route.put("/courses/:id/publish", middleware_1.IsAuthenticated, courseController_1.PublishCourse);
route.delete("/courses/:id", middleware_1.IsAuthenticated, courseController_1.DeleteCourse);
route.get("/categories", categoryController_1.GetAllCategories);
route.get("/categories/:id", categoryController_1.GetCategoryById);
route.post("/categories", middleware_1.IsAdmin, categoryController_1.CreateCategory);
route.put("/categories/:id", middleware_1.IsAdmin, categoryController_1.UpdateCategory);
route.delete("/categories/:id", middleware_1.IsAdmin, categoryController_1.DeleteCategory);
route.get("/courses/:courseId/modules", moduleController_1.GetCourseModules);
route.get("/modules/:id", moduleController_1.GetModuleById);
route.post("/modules", middleware_1.IsAuthenticated, moduleController_1.CreateModule);
route.put("/modules/:id", middleware_1.IsAuthenticated, moduleController_1.UpdateModule);
route.delete("/modules/:id", middleware_1.IsAuthenticated, moduleController_1.DeleteModule);
route.put("/modules/:id/reorder", middleware_1.IsAuthenticated, moduleController_1.ReorderModule);
route.get("/courses/:courseId/materials", materialController_1.GetCourseMaterials);
route.get("/materials/:id", materialController_1.GetMaterialById);
route.post("/materials", middleware_1.IsAuthenticated, materialController_1.CreateMaterial);
route.put("/materials/:id", middleware_1.IsAuthenticated, materialController_1.UpdateMaterial);
route.delete("/materials/:id", middleware_1.IsAuthenticated, materialController_1.DeleteMaterial);
route.post("/materials/:materialId/complete", middleware_1.IsAuthenticated, materialController_1.CompleteMaterial);
route.post("/courses/:courseId/enroll", middleware_1.IsAuthenticated, enrollmentController_1.EnrollInCourse);
route.get("/enrollments/my", middleware_1.IsAuthenticated, enrollmentController_1.GetMyEnrollments);
route.get("/courses/:courseId/students", middleware_1.IsAuthenticated, enrollmentController_1.GetCourseStudents);
route.put("/enrollments/:enrollmentId/status", middleware_1.IsAdmin, enrollmentController_1.UpdateEnrollmentStatus);
route.get("/courses/:courseId/progress", middleware_1.IsAuthenticated, enrollmentController_1.GetEnrollmentProgress);
route.delete("/enrollments/:enrollmentId", middleware_1.IsAuthenticated, enrollmentController_1.DeleteEnrollment);
route.post("/upload/single", middleware_1.IsAuthenticated, uploadController_1.UploadSingleFile);
route.post("/upload/multiple", middleware_1.IsAuthenticated, uploadController_1.UploadMultipleFiles);
route.post("/upload/avatar", middleware_1.IsAuthenticated, uploadController_1.UploadAvatar);
route.post("/upload/course/:courseId/thumbnail", middleware_1.IsAuthenticated, uploadController_1.UploadCourseThumbnail);
route.post("/upload/material/:courseId", middleware_1.IsAuthenticated, uploadController_1.UploadMaterial);
route.delete("/upload/file/:filename", middleware_1.IsAuthenticated, uploadController_1.DeleteUploadedFile);
route.get("/upload/file/:filename", middleware_1.IsAuthenticated, uploadController_1.GetFileInfo);
route.get("/analytics/tutor", middleware_1.IsAuthenticated, analyticsController_1.GetTutorAnalytics);
route.get("/analytics/course/:courseId/completion", middleware_1.IsAuthenticated, analyticsController_1.GetCourseCompletion);
exports.default = route;
